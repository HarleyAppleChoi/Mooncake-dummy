/// <reference types="pino" />
/// <reference types="node" />
import { Address, Gateway, OasisLogger } from 'oasis-std';
import { Readable } from 'readable-stream';
import depd from 'depd';
import { TokenProvider } from './token';
export declare const isNode: boolean;
export declare const deprecate: depd.Deprecate;
export declare class DontRetryError extends Error {
    constructor(message: string);
}
export declare class UnindexedObjectError extends Error {
    constructor(message: string);
}
/**
 * Queries the indexer for information about a dataset at `serviceAddress`.
 *
 * The view of state seen by the indexer slightly lags that of the gateway
 * (which lags that of the consensus layer). Thus, if the indexer returns
 * "no data" but the gateway reports that the dataset exists, this function
 * will retry until the indexer has taken note of the same.
 *
 * @returns the decoded JSON object returned by the indexer for the requested `method`.
 */
export declare function queryIndex<T>(method: string, serviceAddress: Address, indexerUrl: string, oasisGateway: Gateway, tokenProvider: TokenProvider, payload: any, log: OasisLogger | undefined, { INDEXER_RETRY_INTERVAL_MS }?: {
    INDEXER_RETRY_INTERVAL_MS?: number | undefined;
}): Promise<T>;
export declare function unreachable(type: never, errMsg: string): never;
declare type ByteArray = Uint8Array | Buffer;
export declare function collectByteStream(stream: Readable): Promise<Buffer>;
export declare function intoByteStream(bytes: ByteArray | Promise<ByteArray>): Readable;
export declare function toReadable(input: Readable | Uint8Array | Promise<Uint8Array | ArrayBuffer>): Readable;
/** Returns whether the input is a `Uint8Array` (or a `Buffer`). */
export declare function isUint8Array(input: any): input is Uint8Array;
/**
 * Returns whether the input is a `Promise`. This function exists to avoid the ridiculous
 * import syntax of `p-is-promise` [0].
 * [0]: https://github.com/sindresorhus/p-is-promise/releases/tag/v3.0.0
 */
export declare function isPromise(input: any): input is Promise<unknown>;
export {};
