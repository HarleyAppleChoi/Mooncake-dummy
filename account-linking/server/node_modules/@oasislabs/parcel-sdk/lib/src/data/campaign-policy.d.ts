import { Address, Map } from 'oasis-std';
import { Config } from '../config';
import { Identity } from '../identity';
import { Policy } from './policy';
export { CampaignJoined, Error as CampaignPolicyError, PolicyDeactivated as CampaignPolicyDeactivated, } from '../service-clients/campaign-policy';
export declare type CampaignPolicyParams = {
    requester: Address;
};
/**
 * A CampaignPolicy whitelists any identity that accepts to the contained `termsOfUse`
 * by calling `CampaignPolicy.join` (assuming that the identity has been invited).
 */
export declare class CampaignPolicy implements Policy<CampaignPolicyParams> {
    private client;
    private pubState;
    private config;
    private connectedIdentity;
    address: Address;
    owner: Address;
    active: boolean;
    private hasAccess?;
    private invited?;
    private constructor();
    /**
     * Creates a new CampaignPolicy service with the specified terms of use and,
     * optionally, an initial set of invited identities (by address) and their user-friendly
     * names/tags, as provided by the camapign policy creator.
     * Specifying invitees restricts participation to just those who have been invited.
     */
    static create(config: Config, owner: Identity, termsOfUse: string, initialInvites?: Map<Address, string>): Promise<CampaignPolicy>;
    static connect(address: Address, identity: Identity, config: Config): Promise<CampaignPolicy>;
    /**
     * @see `Policy.check`
     * @param `parameters` should be the address you want to validate has agreed to the terms.
     */
    check(params: CampaignPolicyParams, forceLocal?: boolean): Promise<boolean>;
    /**
     * Returns the campaign's terms of use, if the caller has been invited.
     */
    getTermsOfUse(): Promise<string>;
    /**
     * Obtains access to the datasets enforcing this policy by agreeing to
     * the `termsOfUse`. An effect of this call is to emit a public event
     * noting that the connected identity has joined (and accepted the terms of)
     * this CampaignPolicy.
     */
    join(): Promise<void>;
    /** Returns whether the connected identity has been invited to this campaign */
    checkInvited(forceLocal?: boolean): Promise<boolean>;
    /**
     * When called by the owner of the campaign, invites a set of identities to
     * participate. If the campaign was previously open participation, this will
     * restrict new joiners to only those who have been invited.
     * When called with a `Map`, the values are interpreted as user-friendly names,
     * for reference of the inviter.
     */
    invite(invites: Map<Address, string>): Promise<void>;
    setOpenParticipation(): Promise<void>;
    /**
     * Returns the invitee address-name map or `undefined` if participation is open.
     */
    getInvites(): Promise<Map<Address, string> | undefined>;
    /**
     * Deactivates this policy. It will respond to no further requests.
     */
    deactivate(): Promise<void>;
    /** Human-readable information about the object's core properties */
    debugString(): Promise<string>;
}
