import { Readable } from 'readable-stream';
import { Cipher } from '../service-clients/dataset';
export declare type EncryptionResult = {
    cipher: Cipher;
    ciphertext: Readable;
};
export declare type CipherName = 'aes-256-ctr' | 'aes-256-gcm' | 'aes-vcf' | 'plaintext';
export declare function createAes256CtrCipher(): Cipher;
export declare function createAes256GcmCipher(): Cipher.Aes256Gcm;
export declare function createAesVcfCipher(): Cipher;
export declare function createCipherByName(cipherName: CipherName): Cipher;
export declare const createDefaultCipher: typeof createAes256GcmCipher;
/**
 * Encrypts some data using a randomly generated key (and randomly generated nonce).
 * This method assumes that the content-addressable storage correctly handles authentication
 * (e.g., through a Merkle structure).
 * It also assumes that the key returned in the `CipherParams` is not reused.
 * @returns the encryption result including the cipher params and the ciphertext.
 */
export declare function encrypt(plaintext: Readable | Uint8Array, cipher: Cipher): EncryptionResult;
/**
 * Decrypts previously encrypted data.
 * @returns the decrypted data.
 */
export declare function decrypt(cipher: Cipher, ciphertext: Readable | Uint8Array): Readable;
