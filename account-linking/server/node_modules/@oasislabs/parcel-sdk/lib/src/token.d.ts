export declare const PARCEL_AUD = "https://api.oasislabs.com/parcel";
/**
 * A `TokenProvider` hands out OAuth access tokens.
 */
export interface TokenProvider {
    /**
     * Returns a valid Bearer token to be presented to the Parcel gateway.
     */
    getToken(): Promise<string>;
}
/**
 * A `TokenProvider` that always returns the same, initially provided token
 */
export declare class StaticTokenProvider implements TokenProvider {
    private token;
    constructor(token: string);
    getToken(): Promise<string>;
}
export declare enum TokenScope {
    Api = "parcel.temp_api",
    Storage = "parcel.temp_storage",
    GCP = "https://www.googleapis.com/auth/devstorage.read_write"
}
/**
 * A renewing token provider obtains a new access token when the current one has expired.
 */
export declare class RenewingTokenProvider implements TokenProvider {
    private tokenEndpoint;
    private makeRefreshRequestParams;
    private handleRefreshResponse;
    private currentToken;
    private constructor();
    /**
     * Returns a new `RenewingTokenProvider` that obtains new access tokens to
     * https://api.oasislabs.com/parcel by presenting a client assertion to `tokenEndpoint`.
     * The client assertion token is signed using your API access token; you will need to
     * also provide your `clientId` and signing JWK.
     */
    static fromPrivateJWK({ clientId, privateKey, tokenEndpoint, scopes, expiresIn, }: {
        clientId: string;
        privateKey: string;
        tokenEndpoint: string;
        scopes: TokenScope[];
        expiresIn?: string;
    }): RenewingTokenProvider;
    /**
     * Returns a new `RenewingTokenProvider` that obtains new access tokens to
     * https://api.oasislabs.com/parcel by presenting a client assertion to `tokenEndpoint`.
     * The client assertion token is signed using your API access token; you will need to
     * also provide your `clientId` and client secret in PEM format.
     */
    static fromPrivatePEM({ clientId, clientSecret, tokenEndpoint, scopes, expiresIn, }: {
        clientId: string;
        clientSecret: string;
        tokenEndpoint: string;
        scopes: TokenScope[];
        expiresIn?: string;
    }): RenewingTokenProvider;
    /**
     * Returns a new `RenewingTokenProvider` that obtains new access tokens
     * by presenting a non-expired refresh token.
     */
    static fromRefreshToken({ refreshToken, tokenEndpoint, }: {
        refreshToken: string;
        tokenEndpoint: string;
    }): RenewingTokenProvider;
    getToken(): Promise<string>;
    private refreshToken;
}
