/// <reference types="pino" />
import { Address, Gateway, OasisLogger } from 'oasis-std';
import { GCPCredentialsFile } from './storage/gcp';
import { Storage } from './storage';
import { Identity } from './identity/identity';
import { TokenProvider } from './token';
/** The default Parcel Gateway, used if the calling client does not specify their own. */
export declare const DEFAULT_GATEWAY_URL = "https://parcel-sdk.oasiscloud.io";
/** The default OAuth token endpoint, used if the calling client does not specify their own. */
export declare const DEFAULT_TOKEN_ENDPOINT = "https://auth.oasiscloud.io/oauth/token";
/** The default dispatcher used to dispatch jobs, used if the calling client does not specify their own. */
export declare const DEFAULT_DISPATCHER_ADDRESS: Address;
/** Configuration for interacting with AWS S3. */
export declare type S3Params = {
    uploadBucket?: string;
    awsRegion?: string;
    awsAccessKeyId?: string;
    awsSecretAccessKey?: string;
};
/** Configuration for interacting with Google Cloud Storage. */
export declare type GCPParams = {
    uploadBucket?: string;
    accessToken?: string;
    keys?: GCPCredentialsFile;
    expiresIn?: string;
};
export declare type StorageConfig = {
    s3Params?: S3Params;
    gcpParams?: GCPParams;
    localStorageParams?: {};
    uploadBackend?: StorageBackendName;
};
export declare type StorageBackendName = 'parcel' | 's3' | 'gcp' | 'local';
export declare type Params = {
    /**
     * The URL of the Parcel Gateway. If this is not specified,
     * it will default to the Oasis Labs production gateway.
     */
    gatewayUrl?: string;
    /**
     * A static API access token. Use this for convenience when the library will be used for
     * shorter than the lifetime of the access token.
     * Either this or `apiTokenSigner` must be set.
     */
    apiAccessToken?: string;
    /**
     * The signing key JWK used to authentiate to auth.oasislabs.com. Prefer to use
     * `apiTokenSigner` when when using the library in a long-running job that outlives
     * a single access token.
     * `tokenEndpoint` defaults to the Oasis Labs production token endpoint.
     */
    apiTokenSigner?: {
        clientId: string;
        privateKey: string;
        tokenEndpoint?: string;
    };
    /**
     * Storage backend(s) configuration, including the backend to use for uploading
     * new datasets.
     */
    storageBackends?: StorageConfig;
    /**
     * The address of the `Dispatcher` service that will be trusted by `Dataset`
     * services created using the `Config`; and used to schedule jobs. If not
     * specified, this will default to the Oasis Labs production dispatcher.
     */
    dispatcherAddress?: Address;
};
/**
 * `Config` is expected by other classes in this library, like `Identity` and `Dataset`.
 * The same `Config` (singleton) would ideally be used throughout the entire application.
 */
export declare class Config {
    readonly params: Params;
    readonly gatewayUrl: string;
    readonly indexerUrl: string;
    readonly oasisGateway: Gateway;
    readonly storageConfig: StorageConfig;
    readonly storageBackends: {
        [key in StorageBackendName]?: Storage;
    };
    readonly defaultUploadBackend: Storage;
    readonly log: OasisLogger;
    readonly tokenProvider: TokenProvider;
    private connectedIdentity;
    dispatcherAddress: Address;
    /**
     * @returns a new `Config` with the specified parameters.
     */
    constructor(params: Params);
    /**
     * @returns a new `Config` derived from environment variables.
     */
    static paramsFromEnv(): Params;
    /**
     * @returns the Identity connected to the authentication token.
     */
    getTokenIdentity(): Promise<Identity>;
    /**
     * @returns the storage backend for the provided `path`
     */
    storageBackendForPath(path: string): Storage;
}
