import * as oasis from 'oasis-std';
export declare module Cipher {
    class Plaintext implements oasis.AbiEncodable {
        constructor();
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): Plaintext;
    }
    class Aes256Ctr implements oasis.AbiEncodable {
        key: Uint8Array;
        iv: Uint8Array;
        constructor(fields: {
            key: Uint8Array;
            iv: Uint8Array;
        });
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): Aes256Ctr;
    }
    class Aes256Gcm implements oasis.AbiEncodable {
        key: Uint8Array;
        iv: Uint8Array;
        constructor(fields: {
            key: Uint8Array;
            iv: Uint8Array;
        });
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): Aes256Gcm;
    }
    class AesVcf implements oasis.AbiEncodable {
        key: Uint8Array;
        constructor(fields: {
            key: Uint8Array;
        });
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): AesVcf;
    }
    function abiDecode(decoder: oasis.Decoder): Cipher;
    const VARIANTS: Function[];
    function isVariant(obj: any): obj is Cipher;
}
export declare type Cipher = Cipher.Plaintext | Cipher.Aes256Ctr | Cipher.Aes256Gcm | Cipher.AesVcf;
export declare module Error {
    class PermissionDenied implements oasis.AbiEncodable {
        constructor();
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): PermissionDenied;
    }
    class AccessRequest implements oasis.AbiEncodable {
        constructor();
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): AccessRequest;
    }
    class Deactivated implements oasis.AbiEncodable {
        constructor();
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): Deactivated;
    }
    function abiDecode(decoder: oasis.Decoder): Error;
    const VARIANTS: Function[];
    function isVariant(obj: any): obj is Error;
}
export declare type Error = Error.PermissionDenied | Error.AccessRequest | Error.Deactivated;
export declare class DatasetCreated implements oasis.AbiEncodable {
    creator: oasis.Address;
    owner: oasis.Address;
    metadata: Metadata;
    trustedDispatcher: oasis.Address;
    constructor(fields: {
        creator: oasis.Address;
        owner: oasis.Address;
        metadata: Metadata;
        trustedDispatcher: oasis.Address;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): DatasetCreated;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null, topics?: {
        creator?: oasis.Address;
        owner?: oasis.Address;
        metadata?: Metadata;
        trustedDispatcher?: oasis.Address;
    }): Promise<oasis.Subscription<DatasetCreated>>;
}
export declare class AccessRequested implements oasis.AbiEncodable {
    requester: oasis.Address;
    success: boolean;
    constructor(fields: {
        requester: oasis.Address;
        success: boolean;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): AccessRequested;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null, topics?: {
        requester?: oasis.Address;
        success?: boolean;
    }): Promise<oasis.Subscription<AccessRequested>>;
}
export declare class PolicyChanged implements oasis.AbiEncodable {
    policy?: oasis.Address | undefined;
    constructor(fields: {
        policy?: oasis.Address | undefined;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): PolicyChanged;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null, topics?: {
        policy?: oasis.Address | undefined;
    }): Promise<oasis.Subscription<PolicyChanged>>;
}
export declare class DispatcherChanged implements oasis.AbiEncodable {
    dispatcher: oasis.Address;
    constructor(fields: {
        dispatcher: oasis.Address;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): DispatcherChanged;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null, topics?: {
        dispatcher?: oasis.Address;
    }): Promise<oasis.Subscription<DispatcherChanged>>;
}
export declare class OwnerChanged implements oasis.AbiEncodable {
    newOwner: oasis.Address;
    constructor(fields: {
        newOwner: oasis.Address;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): OwnerChanged;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null, topics?: {
        newOwner?: oasis.Address;
    }): Promise<oasis.Subscription<OwnerChanged>>;
}
export declare class DatasetDeactivated implements oasis.AbiEncodable {
    constructor(fields: {});
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): DatasetDeactivated;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null): Promise<oasis.Subscription<DatasetDeactivated>>;
}
export declare class Metadata implements oasis.AbiEncodable {
    title: string;
    dataUrl: string;
    size: bigint;
    metadataUrl?: string | undefined;
    rootHash?: Uint8Array | undefined;
    constructor(fields: {
        title: string;
        dataUrl: string;
        size: bigint;
        metadataUrl?: string | undefined;
        rootHash?: Uint8Array | undefined;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): Metadata;
}
export declare class PublicState implements oasis.AbiEncodable {
    creator: oasis.Address;
    owner: oasis.Address;
    metadata: Metadata;
    active: boolean;
    policy?: oasis.Address | undefined;
    constructor(fields: {
        creator: oasis.Address;
        owner: oasis.Address;
        metadata: Metadata;
        active: boolean;
        policy?: oasis.Address | undefined;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): PublicState;
}
export declare class Dataset {
    readonly address: oasis.Address;
    private gateway;
    static BYTECODE: string;
    private constructor();
    static connect(address: oasis.Address, gateway: oasis.Gateway): Promise<Dataset>;
    static deploy(gateway: oasis.Gateway, { owner, metadata, encryption, trustedDispatcher, policy, }: {
        owner: oasis.Address;
        metadata: Metadata;
        encryption: Cipher;
        trustedDispatcher: oasis.Address;
        policy?: oasis.Address | undefined;
    }, options?: oasis.DeployOptions): Promise<Dataset>;
    private static makeDeployPayload;
    requestAccess({ trustedRequester }: {
        trustedRequester?: oasis.Address | undefined;
    }, options?: oasis.RpcOptions): Promise<Cipher>;
    private static makeRequestAccessPayload;
    getPublicState(options?: oasis.RpcOptions): Promise<PublicState>;
    private static makeGetPublicStatePayload;
    setPolicy({ newPolicy }: {
        newPolicy?: oasis.Address | undefined;
    }, options?: oasis.RpcOptions): Promise<void>;
    private static makeSetPolicyPayload;
    setTrustedDispatcher({ newDispatcher }: {
        newDispatcher: oasis.Address;
    }, options?: oasis.RpcOptions): Promise<void>;
    private static makeSetTrustedDispatcherPayload;
    transferOwnership({ newOwner }: {
        newOwner: oasis.Address;
    }, options?: oasis.RpcOptions): Promise<void>;
    private static makeTransferOwnershipPayload;
    deactivate(options?: oasis.RpcOptions): Promise<void>;
    private static makeDeactivatePayload;
}
