import * as oasis from 'oasis-std';
export declare class PublicState implements oasis.AbiEncodable {
    owner: oasis.Address;
    whitelist: oasis.Set<oasis.Address>;
    active: boolean;
    constructor(fields: {
        owner: oasis.Address;
        whitelist: oasis.Set<oasis.Address>;
        active: boolean;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): PublicState;
}
export declare class AccessChanged implements oasis.AbiEncodable {
    added: oasis.Set<oasis.Address>;
    removed: oasis.Set<oasis.Address>;
    memo: Uint8Array;
    constructor(fields: {
        added: oasis.Set<oasis.Address>;
        removed: oasis.Set<oasis.Address>;
        memo: Uint8Array;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): AccessChanged;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null, topics?: {
        added?: oasis.Set<oasis.Address>;
        removed?: oasis.Set<oasis.Address>;
        memo?: Uint8Array;
    }): Promise<oasis.Subscription<AccessChanged>>;
}
export declare class PolicyCreated implements oasis.AbiEncodable {
    owner: oasis.Address;
    whitelist: oasis.Set<oasis.Address>;
    constructor(fields: {
        owner: oasis.Address;
        whitelist: oasis.Set<oasis.Address>;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): PolicyCreated;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null, topics?: {
        owner?: oasis.Address;
        whitelist?: oasis.Set<oasis.Address>;
    }): Promise<oasis.Subscription<PolicyCreated>>;
}
export declare class PolicyDeactivated implements oasis.AbiEncodable {
    constructor(fields: {});
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): PolicyDeactivated;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null): Promise<oasis.Subscription<PolicyDeactivated>>;
}
export declare module Error {
    class PermissionDenied implements oasis.AbiEncodable {
        constructor();
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): PermissionDenied;
    }
    class Deactivated implements oasis.AbiEncodable {
        constructor();
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): Deactivated;
    }
    function abiDecode(decoder: oasis.Decoder): Error;
    const VARIANTS: Function[];
    function isVariant(obj: any): obj is Error;
}
export declare type Error = Error.PermissionDenied | Error.Deactivated;
export declare class WhitelistPolicy {
    readonly address: oasis.Address;
    private gateway;
    static BYTECODE: string;
    private constructor();
    static connect(address: oasis.Address, gateway: oasis.Gateway): Promise<WhitelistPolicy>;
    static deploy(gateway: oasis.Gateway, { owner, initialWhitelist, }: {
        owner: oasis.Address;
        initialWhitelist: oasis.Set<oasis.Address>;
    }, options?: oasis.DeployOptions): Promise<WhitelistPolicy>;
    private static makeDeployPayload;
    check({ requester }: {
        requester: oasis.Address;
    }, options?: oasis.RpcOptions): Promise<boolean>;
    private static makeCheckPayload;
    changeAccess({ toAdd, toRemove, memo, }: {
        toAdd: oasis.Set<oasis.Address>;
        toRemove: oasis.Set<oasis.Address>;
        memo: Uint8Array;
    }, options?: oasis.RpcOptions): Promise<void>;
    private static makeChangeAccessPayload;
    deactivate(options?: oasis.RpcOptions): Promise<void>;
    private static makeDeactivatePayload;
    getPublicState(options?: oasis.RpcOptions): Promise<PublicState>;
    private static makeGetPublicStatePayload;
}
