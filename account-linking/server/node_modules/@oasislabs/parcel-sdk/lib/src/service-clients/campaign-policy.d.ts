import * as oasis from 'oasis-std';
export declare class PublicState implements oasis.AbiEncodable {
    owner: oasis.Address;
    active: boolean;
    constructor(fields: {
        owner: oasis.Address;
        active: boolean;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): PublicState;
}
export declare class CampaignJoined implements oasis.AbiEncodable {
    requester: oasis.Address;
    constructor(fields: {
        requester: oasis.Address;
    });
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): CampaignJoined;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null, topics?: {
        requester?: oasis.Address;
    }): Promise<oasis.Subscription<CampaignJoined>>;
}
export declare module Error {
    class PermissionDenied implements oasis.AbiEncodable {
        constructor();
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): PermissionDenied;
    }
    class Deactivated implements oasis.AbiEncodable {
        constructor();
        abiEncode(encoder: oasis.Encoder): void;
        static abiDecode(decoder: oasis.Decoder): Deactivated;
    }
    function abiDecode(decoder: oasis.Decoder): Error;
    const VARIANTS: Function[];
    function isVariant(obj: any): obj is Error;
}
export declare type Error = Error.PermissionDenied | Error.Deactivated;
export declare class PolicyDeactivated implements oasis.AbiEncodable {
    constructor(fields: {});
    abiEncode(encoder: oasis.Encoder): void;
    static abiDecode(decoder: oasis.Decoder): PolicyDeactivated;
    static subscribe(gateway: oasis.Gateway, address: oasis.Address | null): Promise<oasis.Subscription<PolicyDeactivated>>;
}
export declare class CampaignPolicy {
    readonly address: oasis.Address;
    private gateway;
    static BYTECODE: string;
    private constructor();
    static connect(address: oasis.Address, gateway: oasis.Gateway): Promise<CampaignPolicy>;
    static deploy(gateway: oasis.Gateway, { owner, termsOfUse, initialInvites, }: {
        owner: oasis.Address;
        termsOfUse: string;
        initialInvites?: oasis.Map<oasis.Address, string> | undefined;
    }, options?: oasis.DeployOptions): Promise<CampaignPolicy>;
    private static makeDeployPayload;
    check({ requester }: {
        requester: oasis.Address;
    }, options?: oasis.RpcOptions): Promise<boolean>;
    private static makeCheckPayload;
    checkInvited(options?: oasis.RpcOptions): Promise<boolean>;
    private static makeCheckInvitedPayload;
    getTermsOfUse(options?: oasis.RpcOptions): Promise<string>;
    private static makeGetTermsOfUsePayload;
    join(options?: oasis.RpcOptions): Promise<void>;
    private static makeJoinPayload;
    getPublicState(options?: oasis.RpcOptions): Promise<PublicState>;
    private static makeGetPublicStatePayload;
    invite({ invites }: {
        invites: oasis.Map<oasis.Address, string>;
    }, options?: oasis.RpcOptions): Promise<void>;
    private static makeInvitePayload;
    getInvites(options?: oasis.RpcOptions): Promise<oasis.Map<oasis.Address, string> | undefined>;
    private static makeGetInvitesPayload;
    setOpenParticipation(options?: oasis.RpcOptions): Promise<void>;
    private static makeSetOpenParticipationPayload;
    deactivate(options?: oasis.RpcOptions): Promise<void>;
    private static makeDeactivatePayload;
}
