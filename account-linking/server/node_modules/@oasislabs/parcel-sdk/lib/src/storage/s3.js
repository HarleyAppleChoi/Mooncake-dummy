"use strict";
/**
 * A thin wrapper around the official AWS S3 client that makes it conform
 * to our `Storage` interface.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_sha3_1 = require("js-sha3");
const s3_1 = __importDefault(require("aws-sdk/clients/s3"));
const readable_stream_1 = require("readable-stream");
const utils_1 = require("../utils");
/**
 * Parses an S3 URI of the format "s3://my_bucket/my_path/to_file.txt" into bucket and
 * path components; or throws an error if the format doesn't match.
 */
function parseS3Uri(s3Uri) {
    const s3UrlRe = /^[sS]3:\/\/(.*?)\/(.*)/;
    const match = s3Uri.match(s3UrlRe);
    if (!match) {
        throw new Error(`Not a valid S3 URL: ${s3Uri}`);
    }
    return {
        Bucket: match[1],
        Key: match[2],
    };
}
class S3Storage {
    /**
     * Connects to AWS with the given credentials and returns a client object.
     * @param s3Params AWS credentials
     */
    constructor(s3Params) {
        this.s3Params = s3Params;
        if (s3Params.awsAccessKeyId === undefined || s3Params.awsSecretAccessKey === undefined) {
            throw new Error(`Cannot connect to S3. Parcel config does not contain S3 configuration.`);
        }
        try {
            this.client = new s3_1.default({
                apiVersion: '2006-03-01',
                accessKeyId: s3Params.awsAccessKeyId,
                secretAccessKey: s3Params.awsSecretAccessKey,
                region: s3Params.awsRegion,
            });
        }
        catch (err) {
            throw new Error(`Cannot connect to S3: ${err}`);
        }
    }
    /**
     * Updates the bucket to which future uploads will go.
     */
    setUploadBucket(bucket) {
        this.s3Params.uploadBucket = bucket;
    }
    /**
     * Uploads `data` to the S3 bucket specified in `s3Params`. The filename is
     * autogenerated from the SHA of `data`.
     * @returns the path (URL) to the uploaded data.
     */
    put(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.s3Params.uploadBucket === undefined) {
                throw new Error(`Cannot upload data to S3; the target bucket is not configured. Make sure your Parcel configuration specifies storageBackends.s3Params.uploadBucket.`);
            }
            const dataBuf = utils_1.isUint8Array(data) ? data : yield utils_1.collectByteStream(data);
            //^ collecting is not ideal, but the AWS JS SDK is buggy anyway:
            // https://github.com/aws/aws-sdk-js/issues/94
            const s3Path = js_sha3_1.keccak256(dataBuf);
            const s3Url = `s3://${this.s3Params.uploadBucket}/${s3Path}`;
            const uploadResult_ = yield this.client
                .putObject({
                Body: dataBuf,
                Bucket: this.s3Params.uploadBucket,
                Key: s3Path,
            })
                .promise()
                .then((success_) => undefined, (err) => {
                throw new Error(`Failed to upload data to ${s3Url}. Error: ${err.stack}`);
            });
            return {
                path: s3Url,
                size: BigInt(dataBuf.length),
            };
        });
    }
    /**
     * Downloads a single file from from S3, synchronously.
     * @param path The S3 URI to fetch, of the form s3://<bucket>/<path>
     */
    get(path) {
        const obj = this.client.getObject(parseS3Uri(path));
        if (utils_1.isNode) {
            return new readable_stream_1.Readable().wrap(obj.createReadStream());
        }
        else {
            // TODO: use stream to download in browser (instead of whole body)
            // aws-sdk throws an error when using a streaming download
            return utils_1.intoByteStream(obj.promise().then((result) => result.Body));
        }
    }
    sizeOf(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const meta = yield this.client.headObject(parseS3Uri(path)).promise();
            if (typeof meta.ContentLength === 'undefined') {
                throw new Error(`unable to retrieve size for S3 object at ${path}`);
            }
            return BigInt(meta.ContentLength);
        });
    }
}
exports.S3Storage = S3Storage;
//# sourceMappingURL=s3.js.map