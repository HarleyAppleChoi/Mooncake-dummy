/**
 * A thin wrapper around the official Google Cloud Storage client that makes it conform
 * to our `Storage` interface.
 */
import { Readable } from 'readable-stream';
import { GCPParams } from '../config';
import { PutResult, Storable, Storage } from '.';
import { TokenProvider } from '../token';
export declare type GCPCredentialsFile = {
    type: string;
    project_id?: string;
    private_key: string;
    private_key_id?: string;
    client_email?: string;
    client_id: string;
    auth_uri?: string;
    token_uri: string;
    auth_provider_x509_cert_url?: string;
    client_x509_cert_url?: string;
};
export declare class GCPStorage implements Storage {
    private gcpParams;
    tokenProvider?: TokenProvider;
    constructor(gcpParams: GCPParams);
    /**
     * Updates the bucket to which future uploads will go.
     */
    setUploadBucket(bucket: string): void;
    /**
     * Returns access token either from keys (token is refreshed, if needed) or a predefined one, if
     * no keys provided.
     */
    getAccessToken(): Promise<string>;
    /**
     * Uploads `data` to the GCP bucket specified in `gcpParams` using a simple POST request. The
     * filename is derived `data` hash (content-addressable storage).
     *
     * @returns the path (URI) to the uploaded data.
     */
    put(data: Storable): Promise<PutResult>;
    /**
     * Downloads a single file from from GCP, synchronously.
     * @param path The GCP URI to fetch, of the form gs://<bucket>/<path>
     */
    get(gcpUri: string): Readable;
    sizeOf(gcpUri: string): Promise<bigint>;
    private getObject;
    private makeGetOptions;
    /**
     * Deletes a single file from from GCP.
     * @param path The GCP URI to delete, of the form gs://<bucket>/<path>
     */
    delete(gcpUri: string): Promise<void>;
}
