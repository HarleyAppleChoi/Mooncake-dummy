/**
 * A thin wrapper around the official AWS S3 client that makes it conform
 * to our `Storage` interface.
 */
import { PutResult, Storable, Storage } from '.';
import { Readable } from 'readable-stream';
import { S3Params } from '../config';
export declare class S3Storage implements Storage {
    private s3Params;
    private client;
    /**
     * Connects to AWS with the given credentials and returns a client object.
     * @param s3Params AWS credentials
     */
    constructor(s3Params: S3Params);
    /**
     * Updates the bucket to which future uploads will go.
     */
    setUploadBucket(bucket: string): void;
    /**
     * Uploads `data` to the S3 bucket specified in `s3Params`. The filename is
     * autogenerated from the SHA of `data`.
     * @returns the path (URL) to the uploaded data.
     */
    put(data: Storable): Promise<PutResult>;
    /**
     * Downloads a single file from from S3, synchronously.
     * @param path The S3 URI to fetch, of the form s3://<bucket>/<path>
     */
    get(path: string): Readable;
    sizeOf(path: string): Promise<bigint>;
}
