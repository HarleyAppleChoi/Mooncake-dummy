/// <reference types="node" />
import { Transform } from 'readable-stream';
import type { Readable } from 'readable-stream';
export { GCPStorage } from './gcp';
export { ParcelStorage } from './parcel';
export { S3Storage } from './s3';
export declare type Storable = Uint8Array | Readable;
export interface Storage {
    /**
     * Writes some data to the storage backend.
     * @returns the path (e.g., URL, multiaddr) to the stored data, as appropriate
     * for the storage backend.
     */
    put(file: Storable): Promise<PutResult>;
    /**
     * Fetches some files from the storage backend at `path`.
     * The path should be one that the backend understands.
     * @returns a stream of the requested file's contents.
     */
    get(path: string): Readable;
    /**
     * Fetches the size of the data blob stored by the storage backend at `path`.
     * @returns the file size in bytes
     */
    sizeOf(path: string): Promise<bigint>;
}
export declare type PutResult = {
    /** The backend-specific path at which the file is stored. */
    path: string;
    /** The stored size of the object, in bytes. */
    size: bigint;
};
/** A `Transform` stream that accumulates the size of the chunks it receives. */
export declare class FileSizerTransform extends Transform {
    private fileSize;
    _transform(chunk: Buffer, _enc: any, cb: (err?: Error, data?: Buffer) => void): void;
    currentFileSize(): bigint;
}
