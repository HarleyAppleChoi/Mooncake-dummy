"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.stackTrace = exports.oasisLogger = exports.logLevelFromEnv = void 0;
const pino_1 = __importDefault(require("pino"));
const isNode = typeof process !== 'undefined' && !!((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node);
/**
 * Deduces the appropriate debug level for logger named `name` from environment variables,
 * as described in `oasisLogger()`.
 **/
function logLevelFromEnv(name) {
    var _a;
    let logLevel = 'silent'; // default
    let spec = '';
    /**
     * Support both Browser and Node.js environment with the same syntax.
     * `process` is not available natively in Browser. We catch the error, and rely on the default `''`.
     * This way, Browser applications served via Webpack and other bundlers can utilze ENV variables too.
     */
    try {
        spec = (_a = process.env.OASIS_SDK_LOG_LEVEL) !== null && _a !== void 0 ? _a : '';
    }
    catch (_b) {
        // ENV variable not present. Use default empty string.
    }
    for (const subspec of spec.split(',')) {
        if (subspec === '') {
            continue;
        }
        else if (subspec.indexOf('=') === -1) {
            // Simple subspec -- just the level
            logLevel = subspec;
        }
        else {
            const [pattern, level] = subspec.split('=', 2);
            try {
                if (new RegExp(pattern).test(name))
                    logLevel = level;
            }
            catch (_c) {
                // A malformed regex, most likely. Ignore silently.
            }
        }
    }
    /**
     *  If env requested some logging, but it's not a recognized level.
     *  Note that 'silent' is not a value in Browser key but acceptable input to pino.
     */
    if (logLevel !== 'silent' && pino_1.default.levels.values[logLevel] === undefined) {
        throw new Error(`Unrecognized log level specified in OASIS_SDK_LOG_LEVEL: ${logLevel}. Use one of trace, debug, info, warn, error, fatal`);
    }
    return logLevel;
}
exports.logLevelFromEnv = logLevelFromEnv;
/**
 * Constructs a new logger named `name` with oasis-default configuration (JSON logs, UTC times, etc).
 * The logging level is determined via the OASIS_SDK_LOG_LEVEL variable, which is parsed as a simple
 * logging spec.
 *
 * Example: `OASIS_SDK_LOG_LEVEL='warn,gateway=error,http.*auth=trace'` is interpreted as:
 *  - Every logger should log at level "warn".
 *  - Loggers whose name contains "gateway" should log at level "error"
 *  - Loggers whose name matches the regex "http.*auth" should log at "trace"
 *
 * The default logging level is "silent". If a logger name matches multiple rules, the last rule prevails.
 * The spec can be very simple, e.g. `OASIS_SDK_LOG_LEVEL=warn`.
 */
function oasisLogger(name) {
    return pino_1.default({
        name,
        serializers: { err: pino_1.default.stdSerializers.err },
        level: logLevelFromEnv(name),
        // ISO format instead of epoch for Node API
        // Note that Browser API does not support time
        timestamp: isNode ? pino_1.default.stdTimeFunctions.isoTime : undefined,
        // Append "v":"1" to log messages so bunyan recognizes them as pretty-printable.
        mixin() {
            return { v: 1 };
        },
    });
}
exports.oasisLogger = oasisLogger;
/**
 *  Returns the current stack trace in a human-readable format.
 */
function stackTrace() {
    var _a;
    const stack = ((_a = new Error().stack) !== null && _a !== void 0 ? _a : '').split('\n');
    // Node starts the stack with the error name on its own line; Firefox doesn't.
    if (stack[0] && stack[0].startsWith('Error')) {
        stack.shift();
    }
    stack.shift(); // Remove top stack entry, i.e. this function.
    return stack.join('\n');
}
exports.stackTrace = stackTrace;
//# sourceMappingURL=logging.js.map