"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unreachable = exports.typedArrayToBuffer = exports.fetchBytecode = exports.encodeHex = exports.decodeHex = void 0;
const buffer_1 = require("buffer");
const node_fetch_1 = __importDefault(require("node-fetch"));
/** Parses a (possibly 0x-prefixed) big-endian hex string into bytes */
function decodeHex(hex) {
    if (hex.startsWith('0x')) {
        hex = hex.slice(2);
    }
    const bytes = new Uint8Array(Math.ceil(hex.length / 2));
    for (let i = 0, j = 0, octetLength = hex.length % 2 !== 0 ? 1 : 2; i < hex.length; i += octetLength, j += 1, octetLength = 2) {
        bytes[j] = parseInt(hex.slice(i, i + octetLength), 16);
    }
    return bytes;
}
exports.decodeHex = decodeHex;
/** Converts a byte array into a 0x-prefixed big-endian hex string. */
function encodeHex(bytes) {
    return '0x' + typedArrayToBuffer(bytes).toString('hex');
}
exports.encodeHex = encodeHex;
function fetchBytecode(bytecodeUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        if (bytecodeUrl.startsWith('file://')) {
            return yield require('fs').promises.readFile(bytecodeUrl.slice('file://'.length));
        }
        else {
            return new Uint8Array(yield (yield node_fetch_1.default(bytecodeUrl)).arrayBuffer());
        }
    });
}
exports.fetchBytecode = fetchBytecode;
/**
 * Zero-copy `Uint8Array` -> `Buffer` conversion. Useful for getting the
 * `Buffer` prototype on bytes returned by other (i.e. oasis.js) functions.
 */
function typedArrayToBuffer(arr) {
    let buf = buffer_1.Buffer.from(arr.buffer);
    if (arr.byteLength !== arr.buffer.byteLength) {
        buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);
    }
    return buf;
}
exports.typedArrayToBuffer = typedArrayToBuffer;
function unreachable(condition, errMsg) {
    throw new Error(errMsg);
}
exports.unreachable = unreachable;
//# sourceMappingURL=utils.js.map